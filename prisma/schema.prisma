datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String         @id @unique @default(cuid())
  handle        String         @unique @default(cuid())
  name          String?        @default("name")
  bio           String?
  email         String?        @unique
  emailVerified DateTime?
  createdAt     DateTime       @default(now()) @db.Timestamptz(3)
  image         String?        @default("https://hmgdlvdpchcrxwiqomud.supabase.co/storage/v1/object/public/clonegram/Assets/default-user-image.jpg")
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  notifications Notification[] @relation("UserNotification")

  posts Post[]
  likes Post[] @relation("UserLikes")
  saved Post[] @relation("UserSaved")

  following      User[] @relation("UserFollowing")
  followers      User[] @relation("UserFollowers")
  blocking       User[] @relation("UserBlocking")
  blockedby      User[] @relation("UserBlockedby")
  recentSearches User[] @relation("UserRecentSearches")

  //relations for same table refs or cross table refs
  followingRelation        User[]         @relation("UserFollowing")
  followersRelation        User[]         @relation("UserFollowers")
  blockingRelation         User[]         @relation("UserBlocking")
  blockedbyRelation        User[]         @relation("UserBlockedby")
  recentSearchesRelation   User[]         @relation("UserRecentSearches")
  PostsLikesRelation       Post[]         @relation("PostLikes")
  PostsSavedRelation       Post[]         @relation("PostSaved")
  CommentsLikesRelation    Comment[]      @relation("CommentLikes")
  NotificationUserRelation Notification[] @relation("UserNotificationRelation")
}

model Post {
  id        String    @id @unique @default(cuid())
  index     Int
  caption   String
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  userId    String
  imageURLs String[]
  comments  Comment[]

  user  User   @relation(fields: [userId], references: [id])
  likes User[] @relation("PostLikes")
  saved User[] @relation("PostSaved")

  //relations for same table refs or cross table refs
  UserLikesRelation        User[]         @relation("UserLikes")
  UserSavedRelation        User[]         @relation("UserSaved")
  NotificationPostRelation Notification[]
}

model Comment {
  id          String    @id @unique @default(cuid())
  text        String
  createdAt   DateTime  @default(now()) @db.Timestamptz(3)
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  replies     Comment[] @relation("replies")
  likes       User[]    @relation("CommentLikes")

  //relations for same table refs or cross table refs  
  repliesRelation             Comment[]      @relation("replies")
  NotificationCommentRelation Notification[]
}

model Notification {
  text                String?
  id                  String   @id @unique @default(cuid())
  createdAt           DateTime @default(now()) @db.Timestamptz(3)
  type                String
  notificationOwner   User?    @relation("UserNotification", fields: [userId], references: [id])
  userId              String?
  notificationCreator User?    @relation("UserNotificationRelation", fields: [userRefId], references: [id])
  userRefId           String?
  post                Post?    @relation(fields: [postId], references: [id])
  postId              String?
  comment             Comment? @relation(fields: [commentId], references: [id])
  commentId           String?
}
