datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                String    @id @unique @default(cuid())
  handle            String    @unique @default(cuid())
  name              String?
  bio               String?
  theme             String    @default("dark")
  email             String?   @unique
  emailVerified     DateTime?
  createdAt         DateTime  @default(now()) @db.Timestamptz(3)
  image             String?
  posts             Post[]
  accounts          Account[]
  sessions          Session[]
  comments          Comment[]
  likes             Post[]    @relation("likes")
  followers         User[]    @relation("UserFollowers")
  followersRelation User[]    @relation("UserFollowers")
  following         User[]    @relation("Userfollowing")
  followingRelation User[]    @relation("Userfollowing")
}

model Post {
  id        String    @id @unique @default(cuid())
  caption   String
  imageURLs String[]
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comments  Comment[]
  likes     User[]    @relation("likes")
}

model Comment {
  id                  String    @id @unique @default(cuid())
  createdAt           DateTime  @default(now()) @db.Timestamptz(3)
  post                Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId              String
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
  parentReply         Comment?  @relation("parentReply", fields: [id], references: [id], onDelete: Cascade)
  parentReplyRelation Comment?  @relation("parentReply")
  replies             Comment[] @relation("replies")
  repliesRelation     Comment[] @relation("replies")
}
